{
	"info": {
		"_postman_id": "2436794b-3a84-4c13-8b92-9f6ee5f24f8d",
		"name": "things",
		"description": "## Overview\n\nAM provides REST APIs under`/json/things/*` for the following use cases:\n\n* Get the attributes of a Thing\n* Obtain an OAuth 2.0 Access Token\n* Token Introspection\n* Obtain an OAuth 2.0 User Code\n* Obtain an OAuth 2.0 User Token\n* Refresh an OAuth 2.0 User Token\n\nTo use the endpoint, a Thing must be in procession of a valid session token (SSO Token). How a request to AM is constructed is dependant on whether the SSO token it has received from AM has a JWT PoP restriction. The following collection uses a simple username and password to authenticate so the simpler unrestricted calls are shown.\n\n## Prerequisites \n\nTo run this collection: \n\n* Install and configure AM as described in the [IoT evaluation guide](https://backstage.forgerock.com/docs/iot/7.1/evaluation-guide/before-you-start.html#install-am).\n* Modify the IoT OAuth 2.0 Client `forgerock-iot-oauth2-client`:\n    * Add `publish` scope to `Scope(s)`.\n    * Add the `Refresh Token` grant to `Grant Types`.\n* Set the collection variables `amURL` to the base URL of your AM instance e.g. `http://am.localtest.me:8080/openam`.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authenticate usr-pwd",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"ssoToken\", jsonData.tokenId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableCookies": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-OpenAM-Username",
						"value": "thingymabot"
					},
					{
						"key": "X-OpenAM-Password",
						"value": "5tr0ngG3n3r@ted"
					},
					{
						"key": "Accept-API-Version",
						"value": "resource=2.0, protocol=1.0"
					}
				],
				"url": {
					"raw": "{{amURL}}/json/realms/root/authenticate?realm={{realm}}",
					"host": [
						"{{amURL}}"
					],
					"path": [
						"json",
						"realms",
						"root",
						"authenticate"
					],
					"query": [
						{
							"key": "realm",
							"value": "{{realm}}"
						}
					]
				},
				"description": "Authenticate to AM with a username and password. Requires a Thing to be registered in AM with:\n\n* username = `thingymabot`\n* password = `5tr0ngG3n3r@ted`"
			},
			"response": []
		},
		{
			"name": "get attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept-api-version",
						"value": "protocol=2.0,resource=1.0"
					},
					{
						"key": "cookie",
						"value": "iPlanetDirectoryPro={{ssoToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{amURL}}/json/things/*?realm={{realm}}&_fields=thingConfig",
					"host": [
						"{{amURL}}"
					],
					"path": [
						"json",
						"things",
						"*"
					],
					"query": [
						{
							"key": "realm",
							"value": "{{realm}}"
						},
						{
							"key": "_fields",
							"value": "thingConfig"
						}
					]
				},
				"description": "Get the attributes of a Thing."
			},
			"response": []
		},
		{
			"name": "get access token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"accessToken\", jsonData.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept-api-version",
						"value": "protocol=2.0,resource=1.0"
					},
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "cookie",
						"value": "iPlanetDirectoryPro={{ssoToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"scope\": [\n        \"publish\"\n    ]\n}"
				},
				"url": {
					"raw": "{{amURL}}/json/things/*?realm={{realm}}&_action=get_access_token",
					"host": [
						"{{amURL}}"
					],
					"path": [
						"json",
						"things",
						"*"
					],
					"query": [
						{
							"key": "realm",
							"value": "{{realm}}"
						},
						{
							"key": "_action",
							"value": "get_access_token"
						}
					]
				},
				"description": "Obtain an OAuth 2.0 Access Token for a Thing."
			},
			"response": []
		},
		{
			"name": "introspect token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept-api-version",
						"value": "protocol=2.0,resource=1.0"
					},
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "cookie",
						"value": "iPlanetDirectoryPro={{ssoToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"token\": \"{{accessToken}}\"\n}"
				},
				"url": {
					"raw": "{{amURL}}/json/things/*?realm={{realm}}&_action=introspect_token",
					"host": [
						"{{amURL}}"
					],
					"path": [
						"json",
						"things",
						"*"
					],
					"query": [
						{
							"key": "realm",
							"value": "{{realm}}"
						},
						{
							"key": "_action",
							"value": "introspect_token"
						}
					]
				},
				"description": "Introspect an OAuth 2.0 Access Token."
			},
			"response": []
		},
		{
			"name": "get user code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"deviceCode\", jsonData.device_code);",
							"pm.collectionVariables.set(\"verifyURI\", jsonData.verification_uri_complete);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept-api-version",
						"value": "protocol=2.0,resource=1.0"
					},
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "cookie",
						"value": "iPlanetDirectoryPro={{ssoToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"scope\": [\n        \"publish\"\n    ]\n}"
				},
				"url": {
					"raw": "{{amURL}}/json/things/*?realm={{realm}}&_action=get_user_code",
					"host": [
						"{{amURL}}"
					],
					"path": [
						"json",
						"things",
						"*"
					],
					"query": [
						{
							"key": "realm",
							"value": "{{realm}}"
						},
						{
							"key": "_action",
							"value": "get_user_code"
						}
					]
				},
				"description": "Obtain a User Code as part of the the OAuth 2.0 [Device Authorization Grant Flow](https://datatracker.ietf.org/doc/html/rfc8628)."
			},
			"response": []
		},
		{
			"name": "get user token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"if(pm.response.code == 403 && jsonData.detail.error == \"authorization_pending\" ){",
							"    throw new Error(\"Authorization pending. Authorize with user at \".concat(pm.collectionVariables.get(\"verifyURI\")));",
							"}",
							"pm.collectionVariables.set(\"refreshToken\", jsonData.refresh_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept-api-version",
						"value": "protocol=2.0,resource=1.0"
					},
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "cookie",
						"value": "iPlanetDirectoryPro={{ssoToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"device_code\": \"{{deviceCode}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{amURL}}/json/things/*?realm={{realm}}&_action=get_user_token",
					"host": [
						"{{amURL}}"
					],
					"path": [
						"json",
						"things",
						"*"
					],
					"query": [
						{
							"key": "realm",
							"value": "{{realm}}"
						},
						{
							"key": "_action",
							"value": "get_user_token"
						}
					]
				},
				"description": "Obtain a User's OAuth 2.0 Access Token for the User by completing the OAuth 2.0 [Device Authorization Grant Flow](https://datatracker.ietf.org/doc/html/rfc8628).\n\nRequires a User to authorise the request by visiting `verification_uri_complete` returned by the preceding `get user code` request."
			},
			"response": []
		},
		{
			"name": "refresh user token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"userToken\", jsonData.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept-api-version",
						"value": "protocol=2.0,resource=1.0"
					},
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "cookie",
						"value": "iPlanetDirectoryPro={{ssoToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"scope\": [\n        \"publish\"\n    ],\n    \"refresh_token\": \"{{refreshToken}}\"\n}"
				},
				"url": {
					"raw": "{{amURL}}/json/things/*?realm={{realm}}&_action=get_access_token",
					"host": [
						"{{amURL}}"
					],
					"path": [
						"json",
						"things",
						"*"
					],
					"query": [
						{
							"key": "realm",
							"value": "{{realm}}"
						},
						{
							"key": "_action",
							"value": "get_access_token"
						}
					]
				},
				"description": "Obtain a new User's OAuth 2.0 Access Token by exchanging a Refresh Token."
			},
			"response": []
		},
		{
			"name": "introspect user token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept-api-version",
						"value": "protocol=2.0,resource=1.0"
					},
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "cookie",
						"value": "iPlanetDirectoryPro={{ssoToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"token\": \"{{userToken}}\"\n}"
				},
				"url": {
					"raw": "{{amURL}}/json/things/*?realm={{realm}}&_action=introspect_token",
					"host": [
						"{{amURL}}"
					],
					"path": [
						"json",
						"things",
						"*"
					],
					"query": [
						{
							"key": "realm",
							"value": "{{realm}}"
						},
						{
							"key": "_action",
							"value": "introspect_token"
						}
					]
				},
				"description": "Introspect a User's OAuth 2.0 Access Token."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "amURL",
			"value": ""
		},
		{
			"key": "realm",
			"value": "/"
		},
		{
			"key": "ssoToken",
			"value": ""
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "deviceCode",
			"value": ""
		},
		{
			"key": "userToken",
			"value": ""
		},
		{
			"key": "refreshToken",
			"value": ""
		},
		{
			"key": "verifyURI",
			"value": ""
		}
	]
}